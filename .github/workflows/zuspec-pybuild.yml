
name: zuspec_pybuild
on:
  workflow_call:
    inputs:
        version_dir:
            required: true
            type: string
        build_universal:
            type: boolean
            default: false
        build_linux:
            type: boolean
            default: true
        build_macos:
            type: boolean
            default: false
        build_windows:
            type: boolean
            default: false
        build_llms_txt:
            type: boolean
            default: false
        build_llms_txt_prompt:
            type: string
            default: >
              Create an 'llms.txt' file using the content of docs, src, and tests.
              This file provides instructions for LLMs to use this library.
        build_docs:
            type: boolean
            default: false
    secrets:
      PYPI_API_TOKEN:
        required: true

jobs:
    llms_txt:
      if: ${{ inputs.build_llms_txt }}
      runs-on: ubuntu-latest
      steps:
      - name: checkout
        uses: actions/checkout@v4
          #      - name: Authenticate with GitHub CLI
          #        run: |
          #          echo "${{ secrets.GH_TOKEN }}" | gh auth login --with-token
      - name: Install Copilot CLI extension
        #        env:
        #          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # gh extension install github/gh-copilot --force
          npm install -g @github/copilot
      - name: Create llms.txt
        env:
          COPILOT_MODEL: "gpt-4.1"
          GITHUB_TOKEN: "x${{ secrets.LLMS_PAT }}x"
        run: |
          copilot --allow-tool "write" -p "${{ inputs.build_llms_txt_prompt }}"
      - name: Copy
        run: |
         cat llms.txt  

    universal:
        if: ${{ inputs.build_universal }}
        needs: llms_txt
        runs-on: ubuntu-latest
        steps:
        - name: checkout
          uses: actions/checkout@v4
        - name: Configure Python version
          uses: actions/setup-python@v5
          with:
            python-version: '3.13' 
        - name: Update Version
          shell: bash
          run: |
            tag=$(git tag -l --contains HEAD)
            echo "tag: ${tag}"

            if test -z ${tag}; then
                # Candidate release
                echo "Configuring a candidate release"
                sed -i -e 's/SUFFIX=".*"/SUFFIX=".${{ github.run_id }}rc0"/g' \
                  ${{ inputs.version_dir }}/__version__.py 
                if test -f pyproject.toml; then
                  sed -i -e 's/version.*=.*"\(.*\)"/version="\1.${{ github.run_id }}rc0"/g' pyproject.toml
                  cat pyproject.toml
                fi
            else
                echo "Configuring a full release"
            fi
        - name: Build packages
          run: |
            python3 -m venv py
            ./py/bin/python3 -m pip install -U ivpm build
            ./py/bin/ivpm update -a --py-prerls-packages
            ./py/bin/python3 -m build
        - name: Publish to PyPi
          if: ${{ startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/tags/v') }}
          env:
            BUILD_NUM: ${{ github.run_id }}
            TWINE_USERNAME: __token__
            TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
          run: |
            python3 -m pip install -U twine packaging
            python3 -m twine upload dist/*.whl

    docs:
        if: ${{ inputs.build_docs }}
        needs: llms_txt
        runs-on: ubuntu-latest
        steps:
        - name: checkout
          uses: actions/checkout@v4
        - name: Configure Python version
          uses: actions/setup-python@v5
          with:
            python-version: '3.13' 
        - name: Setup Python
          run: |
            python3 -m venv py
            ./py/bin/pip install -U ivpm packaging
            ./py/bin/ivpm update -a
            ./packages/python/bin/pip install -U packaging
            make -C docs html
            if test -f llms.txt; then cp llms.txt docs/_build/htmo; fi
            touch docs/_build/html/.nojekyll
        - name: Publish
          if: ${{ startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/tags/v') }}
          uses: JamesIves/github-pages-deploy-action@4.1.7
          with:
            branch: gh-pages
            folder: docs/_build/html

    linux:
        if: ${{ inputs.build_linux && !inputs.build_universal }}
        runs-on: ubuntu-latest
        strategy:
          matrix:
            spec: ['cp38-cp38', 'cp39-cp39', 'cp310-cp310', 'cp311-cp311', 'cp312-cp312']
            image: [manylinux2014_x86_64, manylinux_2_28_x86_64, manylinux_2_34_x86_64]
        steps:
        - name: checkout
          uses: actions/checkout@v4
        - name: Update Version
          shell: bash
          run: |
            tag=$(git tag -l --contains HEAD)
            echo "tag: ${tag}"

            if test -z ${tag}; then
                # Candidate release
                echo "Configuring a candidate release"
                sed -i -e 's/SUFFIX=".*"/SUFFIX=".${{ github.run_id }}rc0"/g' \
                  ${{ inputs.version_dir }}/__version__.py 
            else
                echo "Configuring a full release"
            fi
        
        - name: Build packages
          env:
            IVPM_PYTHON: /opt/python/${{ matrix.spec }}/bin/python
            BUILD_NUM: ${{ github.run_id }}
          run: >
            docker run --rm
            --volume "$(pwd):/io"
            --env IVPM_PYTHON
            --env BUILD_NUM
            --workdir /io
            quay.io/pypa/${{ matrix.image }}
            /io/scripts/build_linux.sh
        - name: Publish to PyPi
          if: ${{ startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/tags/v') }}
          env:
            BUILD_NUM: ${{ github.run_id }}
            TWINE_USERNAME: __token__
            TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
          run: |
            python3 -m pip install -U twine packaging
            python3 -m twine upload wheelhouse/*.whl


